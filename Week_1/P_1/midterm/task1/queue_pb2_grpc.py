# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import queue_pb2 as queue__pb2


class queueStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PutItem = channel.unary_unary(
                '/queue/PutItem',
                request_serializer=queue__pb2.PutRequest.SerializeToString,
                response_deserializer=queue__pb2.PutReply.FromString,
                )
        self.Peek = channel.unary_unary(
                '/queue/Peek',
                request_serializer=queue__pb2.PeekRequest.SerializeToString,
                response_deserializer=queue__pb2.PeekReply.FromString,
                )
        self.Pop = channel.unary_unary(
                '/queue/Pop',
                request_serializer=queue__pb2.PopRequest.SerializeToString,
                response_deserializer=queue__pb2.PopReply.FromString,
                )
        self.Size = channel.unary_unary(
                '/queue/Size',
                request_serializer=queue__pb2.SizeRequest.SerializeToString,
                response_deserializer=queue__pb2.SizeReply.FromString,
                )


class queueServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PutItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Peek(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Pop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Size(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_queueServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PutItem': grpc.unary_unary_rpc_method_handler(
                    servicer.PutItem,
                    request_deserializer=queue__pb2.PutRequest.FromString,
                    response_serializer=queue__pb2.PutReply.SerializeToString,
            ),
            'Peek': grpc.unary_unary_rpc_method_handler(
                    servicer.Peek,
                    request_deserializer=queue__pb2.PeekRequest.FromString,
                    response_serializer=queue__pb2.PeekReply.SerializeToString,
            ),
            'Pop': grpc.unary_unary_rpc_method_handler(
                    servicer.Pop,
                    request_deserializer=queue__pb2.PopRequest.FromString,
                    response_serializer=queue__pb2.PopReply.SerializeToString,
            ),
            'Size': grpc.unary_unary_rpc_method_handler(
                    servicer.Size,
                    request_deserializer=queue__pb2.SizeRequest.FromString,
                    response_serializer=queue__pb2.SizeReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'queue', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class queue(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PutItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/queue/PutItem',
            queue__pb2.PutRequest.SerializeToString,
            queue__pb2.PutReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Peek(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/queue/Peek',
            queue__pb2.PeekRequest.SerializeToString,
            queue__pb2.PeekReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Pop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/queue/Pop',
            queue__pb2.PopRequest.SerializeToString,
            queue__pb2.PopReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Size(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/queue/Size',
            queue__pb2.SizeRequest.SerializeToString,
            queue__pb2.SizeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
